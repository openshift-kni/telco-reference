{{- /* Architecture detection loop: /* -}}
{{- /* Find the architecture of the node which matches this object's nodeSelector */ -}}
{{- $arch := "" }}
{{- $profileSelectors := (keys .spec.nodeSelector) }}
{{- $nodes := lookupCRs "v1" "Node" "" "" }}
{{- range $node := $nodes }}
  {{- /* Skip any nodes that do not match our nodeSelector criteria */ -}}
  {{- $found := false }}
  {{- range $selector := $profileSelectors }}
    {{- if hasKey ($node.metadata.labels | default dict) $selector }}
      {{ $found = true }}
    {{- end }}
  {{- end }}
  {{- if not $found }}
    {{- continue }}
  {{- end }}
  {{- /* Found the first matching node; record its architecture */ -}}
  {{- $arch = index $node.metadata.labels "kubernetes.io/arch" }}
  {{- /* MachineConfig operator already enforces that all machines in a given pool must be the same architecture */ -}}
  {{- break }}
{{- end }}
{{- if ._arch }}
  {{- /* Allow manual override override from telco-ran reference generator (if present) */ -}}
  {{- $arch = ._arch }}
{{- end }}
{{- /* Normalize architecture names; the Node object uses "amd64" and "arm64" instead of "x86_64" and "aarch64" */ -}}
{{- if eq $arch "amd64" }}
  {{- $arch = "x86_64" }}
{{- else if eq $arch "arm64" }}
  {{- $arch = "aarch64" }}
{{- end }}
{{- if not $arch }}
architecture_detection: |-
  WARNING
  -------
  Architecture could not be detected for any nodes matching PerformanceProfile "{{ .metadata.name }}"
  Tuning recommendations may not be accurate.
  Ensure the cluster's Node records are available to cluster-compare.
{{- end }}

apiVersion: performance.openshift.io/v2
kind: PerformanceProfile
metadata:
  # if you change this name make sure the 'include' line in TunedPerformancePatch.yaml
  # matches this name: include=openshift-node-performance-${PerformanceProfile.metadata.name}
  # Also in file 'validatorCRs/informDuValidator.yaml':
  # name: 50-performance-${PerformanceProfile.metadata.name}
  name: openshift-node-performance-profile
  annotations:
    ran.openshift.io/ztp-deploy-wave: "10"
    ran.openshift.io/reference-configuration: "ran-du.redhat.com"
    {{- if .metadata }}
      {{ $allowedSysctls := (list
          "net.ipv6.conf.all.accept_ra"
          "net.ipv6.conf.default.accept_ra"
          "net.ipv6.conf.all.disable_ipv6"
          "net.ipv6.conf.default.disable_ipv6"
          "net.ipv4.conf.all.disable_policy"
          "net.ipv4.conf.default.disable_policy"
          "net.ipv6.conf.all.disable_policy"
          "net.ipv6.conf.default.disable_policy"
          "net.ipv4.conf.all.rp_filter"
          "net.ipv4.conf.default.rp_filter"
          "net.ipv6.conf.all.hop_limit"
          "net.ipv6.conf.default.hop_limit"
        ) }}
      {{- template "kubeletconfigExperimentalSysctls" (list (index (.metadata.annotations | default dict) "kubeletconfig.experimental") (list)  $allowedSysctls) }}
    {{- end }}
spec:
  {{- if eq $arch "aarch64" }}
  # Note: The defaults here are for Grace Hopper systems. Other systems may alternative PCI or iommu settings such as:
  #       - pci=realloc=on (default is off)
  #       - iommu.passthrough=1
  {{- end }}
  additionalKernelArgs:
    {{- $requiredArgs := list
      "efi=runtime"
      "rcupdate.rcu_normal_after_boot=0"
    }}
    {{- $optionalArgs := list
      "console=.*"
      "earlycon"
    }}
    {{- if eq $arch "x86_64" }}
      {{- $requiredArgs = concat $requiredArgs ( list
        "module_blacklist=irdma"
      ) }}
      {{- $optionalArgs = concat $optionalArgs ( list 
        "vfio_pci.disable_idle_d3=1"
        "vfio_pci.enable_sriov=1"
      ) }}
    {{- else if eq $arch "aarch64" }}
      {{- $nonghKernelArgs := list
        "iommu.passthrough=1"
        "pci=realloc"
        "pci=realloc=on"
      }}
      {{- $ghKernelArgs := list
        "acpi_power_meter.force_cap_on=y"
        "module_blacklist=nouveau"
        "pci=pcie_bus_safe"
      }}
      {{- $optionalArgs = concat $optionalArgs $nonghKernelArgs $ghKernelArgs }}
    {{- end }}
    {{- if .spec.workloadHints.perPodPowerManagement }}
      {{- $optionalArgs = append $optionalArgs "cpufreq.default_governor=.*" }}
    {{- end }}
    {{- template "kernelArgList" (list .spec.additionalKernelArgs $requiredArgs $optionalArgs) }}
  cpu:
    isolated: {{ .spec.cpu.isolated }}
    reserved: {{ .spec.cpu.reserved }}
  # hardwareTuning allows maximum CPU frequencies to be set for reserved and isolated CPUs
  #hardwareTuning:
  #  isolatedCpuFreq: <max frequency in kHz>
  #  reservedCpuFreq: <max frequency in kHz>
  {{- if .spec.hardwareTuning }}
  {{- /* Require both isolatedCpuFreq and reservedCpuFreq are set (if this section is present), but allow any value */}}
  hardwareTuning:
    isolatedCpuFreq: {{ .spec.hardwareTuning.isolatedCpuFreq | default "Required - Must be a positive integer" }}
    reservedCpuFreq: {{ .spec.hardwareTuning.reservedCpuFreq | default "Required - Must be a positive integer" }}
  {{- end }}
  hugepages:
    defaultHugepagesSize: {{ .spec.hugepages.defaultHugepagesSize }}
    pages:
      {{- range .spec.hugepages.pages }}
      - size: {{ .size  }}
        count: {{ .count }}
        {{- if .node }}
        node: {{ .node }}
        {{- end }}
      {{- end }}
  {{- if .spec.kernelPageSize }}
  # For aarch64, setting to 64k selects the 64k kernel
  kernelPageSize: {{ .spec.kernelPageSize }}
  {{- end }}
  machineConfigPoolSelector:
    {{ template "matchNodeSelector" (list .spec.machineConfigPoolSelector "pools.operator.machineconfiguration.openshift.io" ) }}
  {{- if .spec.nodeSelector }}
  nodeSelector:
    {{ template "matchNodeSelector" (list .spec.nodeSelector "node-role.kubernetes.io" ) }}
  {{- end }}
  numa:
    topologyPolicy: {{ .spec.numa.topologyPolicy }}
  realTimeKernel:
    # For x86_64, both realtime and non-realtime kernels are supported.
    # For aarch64, only the non-realtime kernel is supported with 64k pagesize.
    enabled: {{ .spec.realTimeKernel.enabled }}
  workloadHints:
    # WorkloadHints defines the set of upper level flags for different type of workloads.
    # See https://github.com/openshift/cluster-node-tuning-operator/blob/master/docs/performanceprofile/performance_profile.md#workloadhints
    # for detailed descriptions of each item.
    # The configuration below is set for a low latency, performance mode.
    realTime: true
    highPowerConsumption: false
    perPodPowerManagement: {{ .spec.workloadHints.perPodPowerManagement | default false }}
